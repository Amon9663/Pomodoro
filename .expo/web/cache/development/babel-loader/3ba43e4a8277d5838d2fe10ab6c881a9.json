{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\vertw\\\\Amon9663\\\\project1\\\\Counter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"./utils/vibrate.js\";\n\nvar Counter = function (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter(props) {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _super.call(this, props);\n\n    _this.countDown = function () {\n      if (_this.state.count > 0 && _this.state.counting) {\n        _this.setState(function (prevState) {\n          return {\n            count: prevState.count - 1\n          };\n        });\n      } else if (_this.state.counting) {\n        if (_this.state.workState) Vibration();\n\n        _this.setState(function (prevState) {\n          return {\n            counting: false,\n            workState: !prevState.workState\n          };\n        });\n\n        _this.resetTimer();\n      }\n    };\n\n    _this.resetTimer = function () {\n      _this.setState(function (prevState) {\n        return {\n          counting: false,\n          count: prevState.startTime\n        };\n      });\n    };\n\n    _this.controlTimer = function () {\n      return _this.setState(function (prevState) {\n        return {\n          counting: !prevState.counting\n        };\n      });\n    };\n\n    _this.controlState = function () {\n      _this.setState(function (prevState) {\n        return {\n          workState: !prevState.workState\n        };\n      });\n\n      _this.resetTimer();\n    };\n\n    _this.state = {\n      workTime: props.time,\n      breakTime: props.time,\n      count: props.time,\n      counting: false,\n      workState: true\n    };\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_this));\n    _this.resetTimer = _this.resetTimer.bind(_assertThisInitialized(_this));\n    _this.controlTimer = _this.controlTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.interval = setInterval(this.countDown, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        title: this.state.workState ? \"WorkTime\" : \"BreakTime\",\n        onPress: this.controlState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }), React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 9\n        }\n      }, this.state.count, \" \"), React.createElement(Button, {\n        title: this.state.counting ? \"Pause\" : \"Start\",\n        onPress: this.controlTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Reset\",\n        onPress: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 8\n        }\n      }));\n    }\n  }]);\n\n  return Counter;\n}(React.Component);\n\nexport default Counter;","map":{"version":3,"sources":["C:/Users/vertw/Amon9663/project1/Counter.js"],"names":["React","Vibration","Counter","props","countDown","state","count","counting","setState","prevState","workState","resetTimer","startTime","controlTimer","controlState","workTime","time","breakTime","bind","interval","setInterval","clearInterval","Component"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,SAAP;;IAEOC,O;;;;;AAEH,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACnB,8BAAMA,KAAN;;AADmB,UAyBrBC,SAzBqB,GAyBT,YAAM;AACd,UAAI,MAAKC,KAAL,CAAWC,KAAX,GAAmB,CAAnB,IAAwB,MAAKD,KAAL,CAAWE,QAAvC,EAAgD;AAClD,cAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,iBAAK;AAC1BH,YAAAA,KAAK,EAAEG,SAAS,CAACH,KAAV,GAAkB;AADC,WAAL;AAAA,SAAvB;AAGC,OAJC,MAII,IAAG,MAAKD,KAAL,CAAWE,QAAd,EAAuB;AACzB,YAAI,MAAKF,KAAL,CAAWK,SAAf,EACKT,SAAS;;AACd,cAAKO,QAAL,CAAc,UAAAC,SAAS;AAAA,iBAAI;AACvBF,YAAAA,QAAQ,EAAE,KADa;AAEvBG,YAAAA,SAAS,EAAG,CAACD,SAAS,CAACC;AAFA,WAAJ;AAAA,SAAvB;;AAKA,cAAKC,UAAL;AACM;AAEX,KAzCoB;;AAAA,UA0CpBA,UA1CoB,GA0CP,YAAM;AAAC,YAAKH,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAG;AAC3CF,UAAAA,QAAQ,EAAG,KADgC;AAEzCD,UAAAA,KAAK,EAAEG,SAAS,CAACG;AAFwB,SAAH;AAAA,OAAvB;AAKA,KA/CA;;AAAA,UAiDvBC,YAjDuB,GAiDR;AAAA,aAAM,MAAKL,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC7CF,UAAAA,QAAQ,EAAE,CAACE,SAAS,CAACF;AADwB,SAAL;AAAA,OAAvB,CAAN;AAAA,KAjDQ;;AAAA,UAqDvBO,YArDuB,GAqDR,YAAM;AAAC,YAAKN,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC9CC,UAAAA,SAAS,EAAE,CAACD,SAAS,CAACC;AADwB,SAAL;AAAA,OAAvB;;AAIA,YAAKC,UAAL;AACA,KA1DC;;AAEnB,UAAKN,KAAL,GAAa;AACTU,MAAAA,QAAQ,EAACZ,KAAK,CAACa,IADN;AAETC,MAAAA,SAAS,EAACd,KAAK,CAACa,IAFP;AAGTV,MAAAA,KAAK,EAAGH,KAAK,CAACa,IAHL;AAITT,MAAAA,QAAQ,EAAG,KAJF;AAKTG,MAAAA,SAAS,EAAG;AALH,KAAb;AAQI,UAAKN,SAAL,GAAiB,MAAKA,SAAL,CAAec,IAAf,+BAAjB;AACA,UAAKP,UAAL,GAAkB,MAAKA,UAAL,CAAgBO,IAAhB,+BAAlB;AACA,UAAKL,YAAL,GAAoB,MAAKA,YAAL,CAAkBK,IAAlB,+BAApB;AAZe;AAapB;;;;wCAEmB;AAElB,WAAKC,QAAL,GAAgBC,WAAW,CAAC,KAAKhB,SAAN,EAAiB,IAAjB,CAA3B;AAED;;;2CAEsB;AACrBiB,MAAAA,aAAa,CAAC,KAAKF,QAAN,CAAb;AACD;;;6BAuCQ;AACP,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,MAAD;AACA,QAAA,KAAK,EAAG,KAAKd,KAAL,CAAWK,SAAX,GAAuB,UAAvB,GAAmC,WAD3C;AAEA,QAAA,OAAO,EAAE,KAAKI,YAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAKA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ,KAAKT,KAAL,CAAWC,KAAnB,MALA,EAOA,oBAAC,MAAD;AACA,QAAA,KAAK,EAAE,KAAKD,KAAL,CAAWE,QAAX,GAAsB,OAAtB,GAA+B,OADtC;AAEA,QAAA,OAAO,EAAG,KAAKM,YAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPA,EAUD,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAG,KAAKF,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAVC,CADJ;AAeD;;;;EAhFoBX,KAAK,CAACsB,S;;AAsF7B,eAAepB,OAAf","sourcesContent":["import React from 'react'\r\nimport {Text, Button, View} from 'react-native'\r\nimport Vibration from './utils/vibrate.js'\r\n\r\n class Counter extends React.Component { \r\n  \r\n    constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        workTime:props.time,\r\n        breakTime:props.time,\r\n        count : props.time,\r\n        counting : false,\r\n        workState : true,\r\n            \r\n    }\r\n        this.countDown = this.countDown.bind(this)\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n        this.controlTimer = this.controlTimer.bind(this)\r\n  }\r\n  \r\n  componentDidMount() {\r\n  \r\n    this.interval = setInterval(this.countDown, 1000)\r\n    \r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n  \r\n  countDown = () => {\r\n      if (this.state.count > 0 && this.state.counting){\r\n    this.setState(prevState => ({\r\n      count: prevState.count - 1,\r\n    }))\r\n    }else if(this.state.counting){\r\n        if (this.state.workState)\r\n             Vibration()\r\n        this.setState(prevState=> ({\r\n            counting: false,\r\n            workState : !prevState.workState,\r\n        }))\r\n    \r\n        this.resetTimer()\r\n             }\r\n      \r\n  }\r\n   resetTimer = () => {this.setState(prevState=>({\r\n      counting : false,\r\n        count: prevState.startTime,\r\n   }))\r\n                       \r\n                      }\r\n\r\ncontrolTimer = () => this.setState(prevState => ({\r\n    counting: !prevState.counting,\r\n}))\r\n    \r\ncontrolState = () => {this.setState(prevState => ({\r\n    workState: !prevState.workState,\r\n    \r\n}))\r\n                      this.resetTimer()\r\n                     }\r\n\r\n\r\n\r\n  render() {\r\n    return( \r\n        <View>\r\n        <Button\r\n        title ={this.state.workState ? \"WorkTime\": \"BreakTime\"} \r\n        onPress={this.controlState}\r\n        />\r\n        <Text >{this.state.count} </Text>\r\n        \r\n        <Button \r\n        title={this.state.counting ? \"Pause\": \"Start\"} \r\n        onPress ={this.controlTimer} />\r\n       <Button title=\"Reset\" onPress ={this.resetTimer} />\r\n        </View>\r\n      )\r\n    \r\n  }\r\n \r\n  \r\n  \r\n}\r\n\r\nexport default Counter;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}