{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\vertw\\\\Amon9663\\\\project1\\\\Counter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\n\nvar Counter = function (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter(props) {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _super.call(this, props);\n\n    _this.inc = function () {\n      console.log('increment!');\n\n      _this.setState(function (prevState) {\n        return {\n          count: prevState.count - 1\n        };\n      });\n    };\n\n    var timer = props.time;\n    _this.state = {\n      count: timer\n    };\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.interval = setInterval(this.inc, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Text, {\n        style: styles.count,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 7\n        }\n      }, this.state.count, \" \");\n    }\n  }]);\n\n  return Counter;\n}(React.Component);","map":{"version":3,"sources":["C:/Users/vertw/Amon9663/project1/Counter.js"],"names":["React","Counter","props","inc","console","log","setState","prevState","count","timer","time","state","interval","setInterval","clearInterval","styles","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;IAGOC,O;;;;;AAEH,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACnB,8BAAMA,KAAN;;AADmB,UAgBrBC,GAhBqB,GAgBf,YAAM;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACA,YAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC1BC,UAAAA,KAAK,EAAED,SAAS,CAACC,KAAV,GAAkB;AADC,SAAL;AAAA,OAAvB;AAGD,KArBoB;;AAEjB,QAAMC,KAAK,GAAGP,KAAK,CAACQ,IAApB;AACF,UAAKC,KAAL,GAAa;AACXH,MAAAA,KAAK,EAAGC;AADG,KAAb;AAHmB;AAMpB;;;;wCAEmB;AAClB,WAAKG,QAAL,GAAgBC,WAAW,CAAC,KAAKV,GAAN,EAAW,IAAX,CAA3B;AACD;;;2CAEsB;AACrBW,MAAAA,aAAa,CAAC,KAAKF,QAAN,CAAb;AACD;;;6BASQ;AACP,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEG,MAAM,CAACP,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA4B,KAAKG,KAAL,CAAWH,KAAvC,MADF;AAGD;;;;EA7BoBR,KAAK,CAACgB,S","sourcesContent":["import React from 'react'\r\nimport {Text} from 'react-native'\r\n\r\n class Counter extends React.Component { \r\n  \r\n    constructor(props) {\r\n    super(props)\r\n      const timer = props.time \r\n    this.state = {\r\n      count : timer,\r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n    this.interval = setInterval(this.inc, 1000)\r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n  \r\n  inc = () => {\r\n    console.log('increment!')\r\n    this.setState(prevState => ({\r\n      count: prevState.count - 1,\r\n    }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Text style={styles.count}>{this.state.count} </Text>\r\n    )\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}