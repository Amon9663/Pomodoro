{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\vertw\\\\Amon9663\\\\project1\\\\Counter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Vibration from \"./utils/vibrate.js\";\n\nvar Counter = function (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter(props) {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _super.call(this, props);\n\n    _this.countDown = function () {\n      if (_this.state.count > 0 && _this.state.counting) {\n        _this.setState(function (prevState) {\n          return {\n            count: prevState.count - 1\n          };\n        });\n      } else if (_this.state.counting) {\n        Vibration();\n        _this.state.counting = false;\n      }\n    };\n\n    _this.controlTimer = function () {\n      return _this.setState(function (prevState) {\n        return {\n          counting: !prevState.counting\n        };\n      });\n    };\n\n    _this.state = {\n      startTime: props.time,\n      count: props.time,\n      counting: false\n    };\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.interval = setInterval(this.countDown, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"resetTimer\",\n    value: function resetTimer() {\n      this.state({\n        counting: false,\n        count: startTime\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 9\n        }\n      }, this.state.count, \" \"), React.createElement(Button, {\n        title: \"Start\",\n        onPress: this.controlTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Reset\",\n        onPress: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 8\n        }\n      }));\n    }\n  }]);\n\n  return Counter;\n}(React.Component);\n\nexport default Counter;","map":{"version":3,"sources":["C:/Users/vertw/Amon9663/project1/Counter.js"],"names":["React","Vibration","Counter","props","countDown","state","count","counting","setState","prevState","controlTimer","startTime","time","interval","setInterval","clearInterval","resetTimer","Component"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,OAAOC,SAAP;;IAEOC,O;;;;;AAEH,mBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACnB,8BAAMA,KAAN;;AADmB,UAoBrBC,SApBqB,GAoBT,YAAM;AACd,UAAI,MAAKC,KAAL,CAAWC,KAAX,GAAmB,CAAnB,IAAwB,MAAKD,KAAL,CAAWE,QAAvC,EAAgD;AAClD,cAAKC,QAAL,CAAc,UAAAC,SAAS;AAAA,iBAAK;AAC1BH,YAAAA,KAAK,EAAEG,SAAS,CAACH,KAAV,GAAkB;AADC,WAAL;AAAA,SAAvB;AAGC,OAJC,MAII,IAAG,MAAKD,KAAL,CAAWE,QAAd,EAAuB;AACpBN,QAAAA,SAAS;AACd,cAAKI,KAAL,CAAWE,QAAX,GAAsB,KAAtB;AAEM;AAEX,KA/BoB;;AAAA,UA0CvBG,YA1CuB,GA0CR;AAAA,aAAM,MAAKF,QAAL,CAAc,UAAAC,SAAS;AAAA,eAAK;AAC7CF,UAAAA,QAAQ,EAAE,CAACE,SAAS,CAACF;AADwB,SAAL;AAAA,OAAvB,CAAN;AAAA,KA1CQ;;AAEnB,UAAKF,KAAL,GAAa;AACTM,MAAAA,SAAS,EAACR,KAAK,CAACS,IADP;AAETN,MAAAA,KAAK,EAAGH,KAAK,CAACS,IAFL;AAGTL,MAAAA,QAAQ,EAAG;AAHF,KAAb;AAFmB;AAQpB;;;;wCAEmB;AAElB,WAAKM,QAAL,GAAgBC,WAAW,CAAC,KAAKV,SAAN,EAAiB,IAAjB,CAA3B;AAED;;;2CAEsB;AACrBW,MAAAA,aAAa,CAAC,KAAKF,QAAN,CAAb;AACD;;;iCAcY;AACV,WAAKR,KAAL,CAAW;AACRE,QAAAA,QAAQ,EAAE,KADF;AAERD,QAAAA,KAAK,EAAEK;AAFC,OAAX;AAOH;;;6BAWS;AACP,aACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAQ,KAAKN,KAAL,CAAWC,KAAnB,MADA,EAEA,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAG,KAAKI,YAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFA,EAGD,oBAAC,MAAD;AAAQ,QAAA,KAAK,EAAC,OAAd;AAAsB,QAAA,OAAO,EAAG,KAAKM,UAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAHC,CADJ;AAQD;;;;EA9DoBhB,KAAK,CAACiB,S;;AAoE7B,eAAef,OAAf","sourcesContent":["import React from 'react'\r\nimport {Text, Button, View} from 'react-native'\r\nimport Vibration from './utils/vibrate.js'\r\n\r\n class Counter extends React.Component { \r\n  \r\n    constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n        startTime:props.time,\r\n        count : props.time,\r\n        counting : false,\r\n            \r\n    }\r\n  }\r\n  \r\n  componentDidMount() {\r\n  \r\n    this.interval = setInterval(this.countDown, 1000)\r\n    \r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n  \r\n  countDown = () => {\r\n      if (this.state.count > 0 && this.state.counting){\r\n    this.setState(prevState => ({\r\n      count: prevState.count - 1,\r\n    }))\r\n    }else if(this.state.counting){\r\n             Vibration()\r\n        this.state.counting = false\r\n       \r\n             }\r\n      \r\n  }\r\n   resetTimer(){ \r\n     this.state({\r\n        counting: false,\r\n        count: startTime\r\n     })\r\n          \r\n       \r\n     \r\n } \r\n\r\ncontrolTimer = () => this.setState(prevState => ({\r\n    counting: !prevState.counting,\r\n}))\r\n    \r\n  \r\n    \r\n\r\n\r\n\r\n  render() {\r\n    return( \r\n        <View>\r\n        <Text >{this.state.count} </Text>\r\n        <Button title=\"Start\" onPress ={this.controlTimer} />\r\n       <Button title=\"Reset\" onPress ={this.resetTimer} />\r\n        </View>\r\n      )\r\n    \r\n  }\r\n \r\n  \r\n  \r\n}\r\n\r\nexport default Counter;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}