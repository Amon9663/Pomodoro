{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\vertw\\\\Amon9663\\\\project1\\\\Counter.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Vibration from \"./utils/vibrate.js\";\n\nvar Counter = function (_React$Component) {\n  _inherits(Counter, _React$Component);\n\n  var _super = _createSuper(Counter);\n\n  function Counter(props) {\n    var _this;\n\n    _classCallCheck(this, Counter);\n\n    _this = _super.call(this, props);\n\n    _this.countDown = function () {\n      if (_this.state.count > 0 && _this.state.counting) {\n        _this.setState(function (prevState) {\n          return {\n            count: prevState.count - 1\n          };\n        });\n      } else if (_this.state.counting) {\n        if (_this.state.workState) Vibration();\n\n        _this.setState(function (prevState) {\n          return {\n            counting: false,\n            workState: !prevState.workState\n          };\n        });\n\n        _this.resetTimer();\n      }\n    };\n\n    _this.resetTimer = function () {\n      return _this.setState(function (prevState) {\n        return {\n          counting: false,\n          count: prevState.startTime\n        };\n      });\n    };\n\n    _this.controlTimer = function () {\n      return _this.setState(function (prevState) {\n        return {\n          counting: !prevState.counting\n        };\n      });\n    };\n\n    _this.controlState = function () {\n      if (_this.state.workState) {\n        _this.setState(function (prevState) {\n          return {\n            workState: !prevState.workState,\n            startTime: 300\n          };\n        });\n      } else {\n        _this.setState(function (prevState) {\n          return {\n            workState: !prevState.workState,\n            startTime: 1500\n          };\n        });\n      }\n\n      _this.resetTimer();\n    };\n\n    _this.state = {\n      startTime: props.time,\n      count: props.time,\n      counting: false,\n      workState: true\n    };\n    _this.countDown = _this.countDown.bind(_assertThisInitialized(_this));\n    _this.resetTimer = _this.resetTimer.bind(_assertThisInitialized(_this));\n    _this.controlTimer = _this.controlTimer.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Counter, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.interval = setInterval(this.countDown, 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.interval);\n    }\n  }, {\n    key: \"convertHMS\",\n    value: function convertHMS(value) {\n      var sec = parseInt(value, 10);\n      var hours = Math.floor(sec / 3600);\n      var minutes = Math.floor((sec - hours * 3600) / 60);\n      var seconds = sec - hours * 3600 - minutes * 60;\n\n      if (hours < 10) {\n        hours = \"0\" + hours;\n      }\n\n      if (minutes < 10) {\n        minutes = \"0\" + minutes;\n      }\n\n      if (seconds < 10) {\n        seconds = \"0\" + seconds;\n      }\n\n      return hours + ':' + minutes + ':' + seconds;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 9\n        }\n      }, React.createElement(Button, {\n        title: this.state.workState ? \"WorkTime\" : \"BreakTime\",\n        onPress: this.controlState,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }\n      }), React.createElement(View, {\n        style: styles.container,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 9\n        }\n      }, React.createElement(Text, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 9\n        }\n      }, this.convertHMS(this.state.count), \" \")), React.createElement(Button, {\n        title: this.state.counting ? \"Pause\" : \"Start\",\n        onPress: this.controlTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }), React.createElement(Button, {\n        title: \"Reset\",\n        onPress: this.resetTimer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 8\n        }\n      }));\n    }\n  }]);\n\n  return Counter;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    width: 150,\n    height: 150,\n    borderRadius: 150 / 2,\n    borderColor: \"black\",\n    borderWidth: 5,\n    alignItems: 'center',\n    justifyContent: 'center',\n    marginTop: 10,\n    marginBottom: 10\n  },\n  timerFont: {\n    fontSize: 40\n  }\n});\nexport default Counter;","map":{"version":3,"sources":["C:/Users/vertw/Amon9663/project1/Counter.js"],"names":["React","Vibration","Counter","props","countDown","state","count","counting","setState","prevState","workState","resetTimer","startTime","controlTimer","controlState","time","bind","interval","setInterval","clearInterval","value","sec","parseInt","hours","Math","floor","minutes","seconds","styles","container","convertHMS","Component","StyleSheet","create","width","height","borderRadius","borderColor","borderWidth","alignItems","justifyContent","marginTop","marginBottom","timerFont","fontSize"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Text, Button, View, StyleSheet} from 'react-native'\r\nimport Vibration from './utils/vibrate.js'\r\n\r\n class Counter extends React.Component { \r\n  \r\n    constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n     \r\n        startTime:props.time,\r\n        count : props.time,\r\n        counting : false,\r\n        workState : true,\r\n            \r\n    }\r\n        this.countDown = this.countDown.bind(this)\r\n        this.resetTimer = this.resetTimer.bind(this)\r\n        this.controlTimer = this.controlTimer.bind(this)\r\n  }\r\n  \r\n  componentDidMount() {\r\n  \r\n    this.interval = setInterval(this.countDown, 1000)\r\n    \r\n  }\r\n  \r\n  componentWillUnmount() {\r\n    clearInterval(this.interval)\r\n  }\r\n  \r\n  countDown = () => {\r\n      if (this.state.count > 0 && this.state.counting){\r\n    this.setState(prevState => ({\r\n      count: prevState.count - 1,\r\n    }))\r\n    }else if(this.state.counting){\r\n        if (this.state.workState)\r\n             Vibration()\r\n        this.setState(prevState=> ({\r\n            counting: false,\r\n            workState : !prevState.workState,\r\n        }))\r\n    \r\n        this.resetTimer()\r\n             }\r\n      \r\n  }\r\n   resetTimer = () => this.setState(prevState=>({\r\n      counting : false,\r\n        count: prevState.startTime,\r\n   }))\r\n\r\ncontrolTimer = () => this.setState(prevState => ({\r\n    counting: !prevState.counting,\r\n}))\r\n    \r\ncontrolState = () => {\r\n    if(this.state.workState){\r\n        this.setState(prevState => ({\r\n        workState: !prevState.workState,\r\n        startTime : 300,\r\n}))\r\n                      \r\n                    }else{\r\n        this.setState(prevState => ({\r\n        workState: !prevState.workState,\r\n        startTime : 1500,\r\n}))\r\n                    }          \r\n            this.resetTimer()\r\n                     }\r\n\r\n convertHMS(value) {\r\n    const sec = parseInt(value, 10); // convert value to number if it's string\r\n    let hours   = Math.floor(sec / 3600); // get hours\r\n    let minutes = Math.floor((sec - (hours * 3600)) / 60); // get minutes\r\n    let seconds = sec - (hours * 3600) - (minutes * 60); //  get seconds\r\n    // add 0 if value < 10; Example: 2 => 02\r\n    if (hours   < 10) {hours   = \"0\"+hours;}\r\n    if (minutes < 10) {minutes = \"0\"+minutes;}\r\n    if (seconds < 10) {seconds = \"0\"+seconds;}\r\n    return hours+':'+minutes+':'+seconds; // Return is HH : MM : SS\r\n}\r\n\r\n\r\n\r\n  render() {\r\n    return( \r\n        <View>\r\n        <Button\r\n        title ={this.state.workState ? \"WorkTime\": \"BreakTime\"} \r\n        onPress={this.controlState}\r\n        />\r\n        <View style ={ styles.container}>\r\n        <Text >{this.convertHMS(this.state.count)} </Text>\r\n        </View>\r\n        <Button \r\n        title={this.state.counting ? \"Pause\": \"Start\"} \r\n        onPress ={this.controlTimer} />\r\n       <Button title=\"Reset\" onPress ={this.resetTimer} />\r\n        </View>\r\n      )\r\n    \r\n  }\r\n \r\n\r\n  \r\n  \r\n}\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    width: 150,\r\n      height: 150,\r\n      borderRadius: 150/2,\r\n    borderColor: \"black\",\r\n      borderWidth: 5,\r\n         alignItems: 'center',\r\n    justifyContent: 'center',\r\n      marginTop: 10,\r\n      marginBottom : 10,\r\n  \r\n  },\r\ntimerFont:{\r\n  fontSize: 40,  \r\n},\r\n});\r\nexport default Counter;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}